// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import sqs "github.com/aws/aws-sdk-go-v2/service/sqs"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: _a0, message
func (_m *Client) DeleteMessage(_a0 context.Context, message *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {
	ret := _m.Called(_a0, message)

	var r0 *sqs.DeleteMessageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.DeleteMessageInput) *sqs.DeleteMessageOutput); ok {
		r0 = rf(_a0, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.DeleteMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqs.DeleteMessageInput) error); ok {
		r1 = rf(_a0, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveMessage provides a mock function with given fields: _a0, input
func (_m *Client) ReceiveMessage(_a0 context.Context, input *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
	ret := _m.Called(_a0, input)

	var r0 *sqs.ReceiveMessageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.ReceiveMessageInput) *sqs.ReceiveMessageOutput); ok {
		r0 = rf(_a0, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ReceiveMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqs.ReceiveMessageInput) error); ok {
		r1 = rf(_a0, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, input
func (_m *Client) SendMessage(ctx context.Context, input *sqs.SendMessageInput) (*sqs.SendMessageOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 *sqs.SendMessageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.SendMessageInput) *sqs.SendMessageOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.SendMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqs.SendMessageInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
