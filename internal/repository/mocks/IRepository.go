// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "project-golang/internal/domain/entity"
import mock "github.com/stretchr/testify/mock"
import model "project-golang/internal/domain/model"

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// CreatedBorrower provides a mock function with given fields: tom, schema
func (_m *IRepository) CreatedBorrower(tom *entity.Borrower, schema string) error {
	ret := _m.Called(tom, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Borrower, string) error); ok {
		r0 = rf(tom, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatedSetup provides a mock function with given fields: set, schema
func (_m *IRepository) CreatedSetup(set *entity.Setup, schema string) error {
	ret := _m.Called(set, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Setup, string) error); ok {
		r0 = rf(set, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatedSimulation provides a mock function with given fields: simu, schema
func (_m *IRepository) CreatedSimulation(simu *entity.Simulation, schema string) (*entity.Simulation, error) {
	ret := _m.Called(simu, schema)

	var r0 *entity.Simulation
	if rf, ok := ret.Get(0).(func(*entity.Simulation, string) *entity.Simulation); ok {
		r0 = rf(simu, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Simulation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Simulation, string) error); ok {
		r1 = rf(simu, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdBorrower provides a mock function with given fields: borrwerId, schema
func (_m *IRepository) FindByIdBorrower(borrwerId string, schema string) (*entity.Borrower, error) {
	ret := _m.Called(borrwerId, schema)

	var r0 *entity.Borrower
	if rf, ok := ret.Get(0).(func(string, string) *entity.Borrower); ok {
		r0 = rf(borrwerId, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Borrower)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(borrwerId, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdSetup provides a mock function with given fields: setupId, schema
func (_m *IRepository) FindByIdSetup(setupId string, schema string) (*entity.Setup, error) {
	ret := _m.Called(setupId, schema)

	var r0 *entity.Setup
	if rf, ok := ret.Get(0).(func(string, string) *entity.Setup); ok {
		r0 = rf(setupId, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Setup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(setupId, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdSimulation provides a mock function with given fields: simulationId, schema
func (_m *IRepository) FindByIdSimulation(simulationId string, schema string) (*entity.Simulation, error) {
	ret := _m.Called(simulationId, schema)

	var r0 *entity.Simulation
	if rf, ok := ret.Get(0).(func(string, string) *entity.Simulation); ok {
		r0 = rf(simulationId, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Simulation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(simulationId, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimulations provides a mock function with given fields: param, schema
func (_m *IRepository) GetSimulations(param *model.Params, schema string) ([]entity.Simulation, error) {
	ret := _m.Called(param, schema)

	var r0 []entity.Simulation
	if rf, ok := ret.Get(0).(func(*model.Params, string) []entity.Simulation); ok {
		r0 = rf(param, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Simulation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Params, string) error); ok {
		r1 = rf(param, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *IRepository) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSetup provides a mock function with given fields: setupId, newSetup, schema
func (_m *IRepository) UpdateSetup(setupId string, newSetup *entity.Setup, schema string) error {
	ret := _m.Called(setupId, newSetup, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *entity.Setup, string) error); ok {
		r0 = rf(setupId, newSetup, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSimulation provides a mock function with given fields: simu, schema
func (_m *IRepository) UpdateSimulation(simu *entity.Simulation, schema string) error {
	ret := _m.Called(simu, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Simulation, string) error); ok {
		r0 = rf(simu, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
