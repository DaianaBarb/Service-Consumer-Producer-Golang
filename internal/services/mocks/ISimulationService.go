// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dto "project-golang/internal/domain/dto"
import jwt "github.com/golang-jwt/jwt/v4"
import mock "github.com/stretchr/testify/mock"
import model "project-golang/internal/domain/model"

// ISimulationService is an autogenerated mock type for the ISimulationService type
type ISimulationService struct {
	mock.Mock
}

// CreatedBorrower provides a mock function with given fields: tom
func (_m *ISimulationService) CreatedBorrower(tom *model.Borrower) error {
	ret := _m.Called(tom)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Borrower) error); ok {
		r0 = rf(tom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatedSetup provides a mock function with given fields: set
func (_m *ISimulationService) CreatedSetup(set *model.Setup) error {
	ret := _m.Called(set)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Setup) error); ok {
		r0 = rf(set)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatedSimulation provides a mock function with given fields: ctx, simu, token
func (_m *ISimulationService) CreatedSimulation(ctx context.Context, simu *model.Simulation, token *jwt.Token) error {
	ret := _m.Called(ctx, simu, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Simulation, *jwt.Token) error); ok {
		r0 = rf(ctx, simu, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdBorrower provides a mock function with given fields: borrwerId
func (_m *ISimulationService) FindByIdBorrower(borrwerId string) (*model.Borrower, error) {
	ret := _m.Called(borrwerId)

	var r0 *model.Borrower
	if rf, ok := ret.Get(0).(func(string) *model.Borrower); ok {
		r0 = rf(borrwerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Borrower)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(borrwerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdSetup provides a mock function with given fields: setupId
func (_m *ISimulationService) FindByIdSetup(setupId string) (*model.Setup, error) {
	ret := _m.Called(setupId)

	var r0 *model.Setup
	if rf, ok := ret.Get(0).(func(string) *model.Setup); ok {
		r0 = rf(setupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Setup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(setupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdSimulation provides a mock function with given fields: simulationId
func (_m *ISimulationService) FindByIdSimulation(simulationId string) (*model.Simulation, error) {
	ret := _m.Called(simulationId)

	var r0 *model.Simulation
	if rf, ok := ret.Get(0).(func(string) *model.Simulation); ok {
		r0 = rf(simulationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Simulation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(simulationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByParamSimulations provides a mock function with given fields: param
func (_m *ISimulationService) FindByParamSimulations(param *model.Params) (dto.SimulationPaginationResponse, error) {
	ret := _m.Called(param)

	var r0 dto.SimulationPaginationResponse
	if rf, ok := ret.Get(0).(func(*model.Params) dto.SimulationPaginationResponse); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(dto.SimulationPaginationResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Params) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJWT provides a mock function with given fields: payload
func (_m *ISimulationService) GenerateJWT(payload model.PayloadJWT) (string, error) {
	ret := _m.Called(payload)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.PayloadJWT) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.PayloadJWT) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *ISimulationService) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimulationResponseBorrower provides a mock function with given fields: response
func (_m *ISimulationService) SimulationResponseBorrower(response *model.SimulationResponseBorrower) error {
	ret := _m.Called(response)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.SimulationResponseBorrower) error); ok {
		r0 = rf(response)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenIsValid provides a mock function with given fields: tokenString
func (_m *ISimulationService) TokenIsValid(tokenString string) (*jwt.Token, error) {
	ret := _m.Called(tokenString)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSetup provides a mock function with given fields: setupId, newSetup
func (_m *ISimulationService) UpdateSetup(setupId string, newSetup *model.Setup) error {
	ret := _m.Called(setupId, newSetup)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.Setup) error); ok {
		r0 = rf(setupId, newSetup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSimulationStatus provides a mock function with given fields: simulationId, status
func (_m *ISimulationService) UpdateSimulationStatus(simulationId string, status string) error {
	ret := _m.Called(simulationId, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(simulationId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
