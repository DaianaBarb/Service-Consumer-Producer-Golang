// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dto "project-golang/internal/domain/dto"
import jwt "github.com/golang-jwt/jwt/v4"
import mock "github.com/stretchr/testify/mock"
import model "project-golang/internal/domain/model"

// ISimulationService is an autogenerated mock type for the ISimulationService type
type ISimulationService struct {
	mock.Mock
}

// CreatedBorrower provides a mock function with given fields: tom, schema
func (_m *ISimulationService) CreatedBorrower(tom *model.Borrower, schema string) error {
	ret := _m.Called(tom, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Borrower, string) error); ok {
		r0 = rf(tom, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatedSetup provides a mock function with given fields: set, schema
func (_m *ISimulationService) CreatedSetup(set *model.Setup, schema string) error {
	ret := _m.Called(set, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Setup, string) error); ok {
		r0 = rf(set, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatedSimulation provides a mock function with given fields: ctx, simu, token, schema
func (_m *ISimulationService) CreatedSimulation(ctx context.Context, simu *model.Simulation, token *jwt.Token, schema string) error {
	ret := _m.Called(ctx, simu, token, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Simulation, *jwt.Token, string) error); ok {
		r0 = rf(ctx, simu, token, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIdBorrower provides a mock function with given fields: borrwerId, schema
func (_m *ISimulationService) FindByIdBorrower(borrwerId string, schema string) (*model.Borrower, error) {
	ret := _m.Called(borrwerId, schema)

	var r0 *model.Borrower
	if rf, ok := ret.Get(0).(func(string, string) *model.Borrower); ok {
		r0 = rf(borrwerId, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Borrower)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(borrwerId, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdSetup provides a mock function with given fields: setupId, schema
func (_m *ISimulationService) FindByIdSetup(setupId string, schema string) (*model.Setup, error) {
	ret := _m.Called(setupId, schema)

	var r0 *model.Setup
	if rf, ok := ret.Get(0).(func(string, string) *model.Setup); ok {
		r0 = rf(setupId, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Setup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(setupId, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdSimulation provides a mock function with given fields: simulationId, schema
func (_m *ISimulationService) FindByIdSimulation(simulationId string, schema string) (*model.Simulation, error) {
	ret := _m.Called(simulationId, schema)

	var r0 *model.Simulation
	if rf, ok := ret.Get(0).(func(string, string) *model.Simulation); ok {
		r0 = rf(simulationId, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Simulation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(simulationId, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByParamSimulations provides a mock function with given fields: param, schema
func (_m *ISimulationService) FindByParamSimulations(param *model.Params, schema string) (*dto.SimulationPaginationResponse, error) {
	ret := _m.Called(param, schema)

	var r0 *dto.SimulationPaginationResponse
	if rf, ok := ret.Get(0).(func(*model.Params, string) *dto.SimulationPaginationResponse); ok {
		r0 = rf(param, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.SimulationPaginationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Params, string) error); ok {
		r1 = rf(param, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJWT provides a mock function with given fields: payload
func (_m *ISimulationService) GenerateJWT(payload model.PayloadJWT) (string, error) {
	ret := _m.Called(payload)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.PayloadJWT) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.PayloadJWT) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *ISimulationService) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimulationResponseBorrower provides a mock function with given fields: id, response, schema
func (_m *ISimulationService) SimulationResponseBorrower(id string, response *model.SimulationResponseBorrower, schema string) error {
	ret := _m.Called(id, response, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.SimulationResponseBorrower, string) error); ok {
		r0 = rf(id, response, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenIsValid provides a mock function with given fields: tokenString
func (_m *ISimulationService) TokenIsValid(tokenString string) (*jwt.Token, error) {
	ret := _m.Called(tokenString)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSetup provides a mock function with given fields: newSetup, schema
func (_m *ISimulationService) UpdateSetup(newSetup *model.Setup, schema string) error {
	ret := _m.Called(newSetup, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Setup, string) error); ok {
		r0 = rf(newSetup, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSimulation provides a mock function with given fields: m, schema
func (_m *ISimulationService) UpdateSimulation(m *model.Simulation, schema string) error {
	ret := _m.Called(m, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Simulation, string) error); ok {
		r0 = rf(m, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
